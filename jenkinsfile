
pipeline {
    agent any
    options {
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
        }
    stages {
        stage('list_files') {
            steps {
                script {
                    try {
                        echo " List of files"
                        sh 'ls -ltr'
                        }
                    catch (exec) {
                        echo 'Something didnot work and got some exceptions'
                        }
                    }
                }
            }
        stage('parsexml') {
            steps {
                script {
                    try {
                        echo " +++++++= Parsing ++++++++"
                        def xml = '''
                        <AS Name="123">
                            <Config Name="Configuration1">
                                <Servers>
                                    <Server Name="server1"/>
                                    <Server Name="server2"/>
                                    <Server Name="server3"/>
                                    <Server Name="server4"/>
                                </Servers>
                            </Config>
                        </AS>
                        '''

                        def config = new XmlParser().parseText(xml)
                        config.Config.Servers.Server.each{
                            println it.@Name
                        }
                        }
                    catch (exec) {
                        echo 'Something didnot work and got some exceptions'
                        }
                    }
                }
            }
        }
    post {
        always {
            //junit 'build/reports/**/*.xml'
            echo 'No Error'
        }
        success {
            echo 'success Parsing'
        }
        failure {
            echo 'parsing failed'
            
        }
        unstable {
            echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
        }
        changed {
            echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
        }
    }
}