@Library('xmlparsing@main')_ // _ accept all libraries under vars folder . it should import
def First_NAME = null
def response = null
node {
    sh 'echo node scipted pipeline testing box'
}
pipeline {
    agent none
    options {
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '15'))
        //skipDefaultCheckout false
        
    }
    environment {
        ws = "null"
        // JOB_TIME = sh (returnStdout: true, script: "date '+%A %W %Y % X'").trim()
    }
    stages {
        stage('Test_SCRIPT') {
            agent any
            steps {
                script {
                    echo "================================ TEST SCRIPT STAGE ================================="
                
                    response = httpRequest url: 'https://raw.githubusercontent.com/2jithin/sampletomcatapplication/main/pom.xml'
                    echo "Request http status is ${response.status}"
                }

                // echo "Building ${env.JOB_NAME}..."
                // echo "${env.WORKSPACE}"
            }
        }
        stage('list_files') {
            agent any
            // input { // should not use inside the script or steps
            //     message "Enter the name?"
            //     ok "submit"
            //     parameters {
            //         string(defaultValue: 'jithi', name: 'NAME', trim: true) 
            //     }
            // }
            steps {
                script {
                    try {
                        echo "============================================ Listing File ============================================="
                        // First_NAME = input (     // This will work under the script
                        //     message: "Enter the name?",
                        //     ok: "submit_input",
                        //     parameters: [string(defaultValue: 'jithin', name: 'First_NAME', trim: true)]
                        // )

                        echo ' List of files'
                        sh 'ls -ltr'
                    }
                    catch (exec) {
                        echo 'Something didnot work and got some exceptions'
                    }
                }
            }
        }
        stage('parsexml') {
            steps {
                echo '___________________ PARSING STARTED _________________________'
                script {
                    try {
                        echo ' +++++++= Parsing ++++++++ '

                        // sh "export -p" // shell script not loading
                        //def jenkinsworkspace = readFile('jenkinsworkspace').trim()
                        pomfileparsing("${response.content}")
                    }
                    catch (Exception ex) {
                        echo 'Something didnot work and got some exceptions'
                    }
                }
            }
        }
    }
    post {
        always {
            //junit 'build/reports/**/*.xml'
            echo '******************************** Pipeline Run Completed ****************************'
        }
        success {
            echo 'success Parsing'
        }
        failure {
            echo 'parsing failed'
        }
        unstable {
            echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
        }
        changed {
            echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
        }
    }
}

// @NonCPS
// def myFunction() {
//     throw new RuntimeException()
// }

// @NonCPS
// def servers(xml) {
//     new XmlParser().parseText(xml).Config.Servers.Server.collect{it.@Name}
//     println xml
// }
// def xml = readFile "${env.WORKSPACE}/parameters.xml"
// println servers(xml)

// @NonCPS

// parsing("jithin c")