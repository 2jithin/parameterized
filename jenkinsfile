@Library('xmlparsing@main')_ // _ accept all libraries under vars folder . it should import
def First_NAME = null
pipeline {
    agent none
    options {
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    stages {
        stage('list_files') {
            agent any
            // input { // should not use inside the script or steps
            //     message "Enter the name?"
            //     ok "submit"
            //     parameters {
            //         string(defaultValue: 'jithi', name: 'NAME', trim: true) 
            //     }
            // }
            steps {
                script {
                    try {
                        // First_NAME = input (     // This will work under the script
                        //     message: "Enter the name?",
                        //     ok: "submit_input",
                        //     parameters: [string(defaultValue: 'jithin', name: 'First_NAME', trim: true)]
                        // )
                        echo ' List of files'
                        sh 'ls -ltr'

                        // def xml = '''\
                        // <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                        // <AS Name="123">
                        //     <Config Name="Configuration1">
                        //         <Servers>
                        //             <Server Name="server1"/>
                        //             <Server Name="server2"/>
                        //             <Server Name="server3"/>
                        //             <Server Name="server4"/>
                        //         </Servers>
                        //     </Config>

                        // </AS>'''

                        // def config = new XmlParser().parseText(xml) // defining the the variable

                        // config.Config.Servers.Server.each {
                        //     println it['Name']
                        // }
                    }
                    catch (exec) {
                        echo 'Something didnot work and got some exceptions'
                    }
                }
            }
        }
        stage('parsexml') {
            steps {
                echo '___________________ PARSING STARTED _________________________'
                script {
                    try {
                        echo ' +++++++= Parsing ++++++++'
                        sh 'pwd > jenkinsworkspace'
                        def jenkinsworkspace = readFile('jenkinsworkspace').trim()
                        echo "${jenkinsworkspace}"
                        parsing("Jithin C","${env.WORKSPACE}/parameters.xml")
                    }
                    catch (Exception ex) {
                        echo 'Something didnot work and got some exceptions'
                    }
                }
            }
        }
    }
    post {
        always {
            //junit 'build/reports/**/*.xml'
            echo '******************************** Pipeline Run Completed ****************************'
        }
        success {
            echo 'success Parsing'
        }
        failure {
            echo 'parsing failed'
        }
        unstable {
            echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
        }
        changed {
            echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
        }
    }
}

// @NonCPS
// def myFunction() {
//     throw new RuntimeException()
// }

// @NonCPS
// def servers(xml) {
//     new XmlParser().parseText(xml).Config.Servers.Server.collect{it.@Name}
//     println xml
// }
// def xml = readFile "${env.WORKSPACE}/parameters.xml"
// println servers(xml)